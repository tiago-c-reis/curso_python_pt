# --- Strings em Python - Introdu√ß√£o e Princ√≠pios B√°sicos | V√≠deo-Aula ---
#
# ‚ñ∂Ô∏è Canal YouTube: Automation and Data Science
#           url: https://www.youtube.com/channel/UCOGLG_-uQco3Z7YGXtbEbEg
#
#       üëâ  video: https://youtu.be/vd_87mo234s
#
# üí° Dica: converta para coment√°rio as linhas de c√≥digo que n√£o ver representada na consola.
#          Exemplo: # print(canal)
#
# ‚úîÔ∏è Ajude o nosso canal de Educa√ß√£o:
#       Partilhe, Fa√ßa like e Comente.
#       Ajudar este canal √© ajudar toda a comunidade.
#
# ---

# 1. Como definir str em Python (via ' ou " )
'Automation and Data Science'
"Automation and Data Science"

# 2. Como declarar/iniciar uma vari√°vel do tipo str
canal = 'Automation and Data Science'

# 3. Como imprimir na consola uma str
print(canal)
print()  # >> como imprimir uma linha vazia

tipo_conteudo = 'Tutorial'
nome_conteudo = 'Strings em Python - Princ√≠pios e Opera√ß√µes B√°sicas | Tutorial'

# >> print(arg0, arg1, ...) imprime numa linha cada argumento detectado
print(tipo_conteudo, nome_conteudo)
print()

# >> print(arg0, arg1, ..., sep=char, end=\char)
#    i)  o termo sep indica a str que deve se adicionada entre os argumentos
#        se n√£o definido, o valor de defeito √© uma espa√ßo em branco
#    ii) o termo end indica a str que deve se adicionada no final da impress√£o na consola
#        se n√£o definido, o valor de defeito √© uma nova linha '\n'
print(tipo_conteudo, nome_conteudo, sep=':')
print()
print(tipo_conteudo, nome_conteudo, sep=' >> ', end=' ***')
print()

# 4. Definir uma vari√°vel str com v√°rias linhas (via ''' ou """ )
canal_info = '''
Canal: Automation and Data Science
    V√≠deo >> Tipo de Dados: Strings em Python
    Playlist >> Curso de Python Completo para Iniciantes
'''
print(canal_info)

# >> Dica: Por vezes a nossa str √© bastante grande. De forma a conseguir ler confort√°velmente no editor, podemos
#          escrever a str em multiplas linhas, mas n√£o iremos imprimir essas linhas.
description_video = (
    'Como instalar Python e PyCharm num computador Windows.'
    ' Se tem um computador com sistema operativo Windows, neste tutorial aprenda a:'
    ' (1) verificar se #Python j√° est√° instalado num computador #Windows'
    ' (2) instalar Python no seu computador (se ainda n√£o estiver instalado)'
    ' (3) instalar #PyCharm no seu computador'
)

print(description_video)
print()

# 5. Utilizar o caractere especial \ (escape character)
# >> imprimir novas linhas (\n)
#    nota: ao imprimir \n no final da str, podemos deixar de imprimir linhas vazias via print()
print('Strings em Python s√£o um tipo de dados referentes a informa√ß√£o textual.\n\nAcab√°mos de criar duas linhas.', '\n')

# >> imprimir tabula√ß√µes para melhor legibilidade (\t)
print('Canal\tSubscrever Canal\tAtivar Notifica√ß√µes', '\n')

# >> imprimir o caractere ' quando tamb√©m √© utilizado da defini√ß√£o da str
print('N√∫mero de visualiza√ß√µes: 1\'250 000', '\n')

# >> imprimir o caracter \ quando √© utilizado na pr√≥pria str (conceito de raw string)
print(r'c:\User\Ana', '\n')

# >> imprimir characteres with 32-bit hex value (exemplo: emoji)
print('\U0001F642', '\n')

# 6. Opera√ß√µes como str
# >> Concatena√ß√£o (juntar v√°rias str)
channel_part1 = 'Auto'
channel_part2 = 'mation'

concat = channel_part1 + channel_part2
print(concat, '\n')

# >> Multiplica√ß√£o (repetir v√°rias vezes uma str)
letter = '!'
print(letter * 3, '\n')

# >> Concatena√ß√£o e Multiplica√ß√£o
result = channel_part1 + channel_part2 + letter * 3
print(result, '\n')

# 7. Indexa√ß√£o (str s√£o sequ√™ncias de caracteres / formato [start:end:step] )
channel_name = 'Automation and Data Science'

# >> primeiro caractere
print(channel_name[0], '\n')

# >> primeiros 4 caracteres
print(channel_name[0:4], '\n')

# >> caracteres entre o 13¬∫ e 21¬∫ √≠ndice
print(channel_name[12:22], '\n')

# >> caracteres entre o 2¬∫ e 21¬∫ √≠ndice de 2 em 2 caracteres
print(channel_name[1:22:2], '\n')

# >> nota: caso in√≠cio, fim e passo n√£o est√£o indicados, estes assument o valor de 0, √∫ltimo √≠ndice e 1, respectivamente
print(channel_name[::], '\n')

# >> nota: usar √≠ndices negativos indica que estamos a correr a string da direita para a esquerda
# >> √∫ltimo caractere
print(channel_name[-1], '\n')

# >> √∫ltimos 10 caracteres
print(channel_name[-10:], '\n')

# >> reverter toda a str
print(channel_name[::-1], '\n')

# 8. Imutabilidade
# >> strings em Python s√£o emut√°veis, isso quer dizer que n√£o podemos substituir caracteres individualmente

# channel_name[0] = 'B'  # Esta mensagem gera um erro do tipo TypeError, n√£o podemos alterar 'A' por 'B'

# >> nota: podemos fazer a substitui√ß√£o de um caracter por outro da seguinte forma
letter = 'B'
result = letter + channel_name[1:]
print(result, '\n')

# 9. Format strings
# >> existe um subtipo de strings em Python chamadas formated strings, ou simplesmente, f strings
#    f strings permitem tratar informa√ß√£o dentro de uma string sob a forma de uma vari√°vel. O que √© importante para
#    escrever scripts
user = 'Tiago'
formated_string = f"Ol√° {user}"
print(formated_string, '\n')

# >> outro exemplo das f strings √© ter acesso ao nome da vari√°vel e seu valor str
print(f"{user = }")

# 10. Representation of strings ({var_name}!r ou repr(var_name))
# >>  Prints the string with the character ' included
user = 'Tiago'
print(f"{user!r}", '\n')  # op√ß√£o 1
print(repr(user), '\n')  # op√ß√£o 2

# 11. Comprimento de uma string, ou seja, n√∫mero de caracteres numa string (via len())
channel_name = 'Automation and Data Science'
numero_caracteres = len(channel_name)

print(f'A string {channel_name!r} tem {numero_caracteres} caracteres')
